#! /bin/bash

clear

# define config variables
export FS_FOLDER=$1
export FS_SIZE=$2
export FS_TYPE=$3
export INITRAMFS=$4
export BUILD_TMP=$(pwd)/build
export FORCE_UNSAFE_CONFIGURE=1

# define default value when args is empty
if [ -z "$FS_FOLDER" ]; then
    FS_FOLDER="rootfs"
fi
if [ -z "$FS_SIZE" ]; then
    FS_SIZE=512
fi
if [ -z "$FS_TYPE" ]; then
    FS_TYPE="ext4"
fi

if [ -z "$INITRAMFS" ]; then
	INITRAMFS=0
fi

export SYSROOT=$(pwd)/${FS_FOLDER}
export SRCROOT=$(pwd)

mkdir -p $SRCROOT/debs/pool

if [ -d ${FS_FOLDER} ]; then
    rm -rvf ${FS_FOLDER} >/dev/null 2>/dev/null
    rm  ${FS_FOLDER}.img >/dev/null 2>/dev/null
fi

mkdir ${FS_FOLDER}

if [ "x$INITRAMFS" == "x1" ]; then
    cd linux-*
	if [ -f usr/initramfs_data.cpio ]; then
		rm usr/initramfs_data.cpio
	fi
	cd ..
fi

# init rootfs as disk image
dd if=/dev/zero of=${FS_FOLDER}.img bs=1M count=${FS_SIZE} >/dev/null 2>/dev/null
mkfs.${FS_TYPE} ${FS_FOLDER}.img >/dev/null 2>/dev/null
mount ${FS_FOLDER}.img $SYSROOT

# create temp build directories
if [ -d $BUILD_TMP ]; then
    rm -rf $BUILD_TMP >/dev/null 2>/dev/null
fi
mkdir -p $BUILD_TMP
cd $BUILD_TMP

# do builds in build temp directories

# define some help functions for source pickup
pickup_gnu_source(){
    export package=$1
    export ARC=$2
    # download source index files
    curl -s https://ftp.gnu.org/gnu/$package/ > $package.html

    # parse the html to pickup source list
    # pickup $package-\d.*.tar.gz
    grep -oP '(?<=href=")[^"]*' $package.html | grep -E "\.tar\.$ARC$" | grep -P "$package-\d" > $package.list
}

pickup_gnu_latest(){
    export package=$1
    export arc=$2

    # keep only version number from list
    sed -e "s/$package-//" -e "s/.tar.$arc//" $package.list > $package.version

    # sort the version number
    sort -V $package.version > $package.version.sorted

    # pickup the latest version
    export latest=$(tail -n 1 $package.version.sorted)

    rm -rf *.version > /dev/null 2>/dev/null
    rm -rf *.version.sorted > /dev/null 2>/dev/null

    echo $package-$latest.tar.$arc
}

download_gnu_source(){
    export package=$1
    export url=$2

    # download the source
    curl -O https://ftp.gnu.org/gnu/$package/$url
    if [ $? -ne 0 ]; then
        echo "Download $package failed"
        exit 1
    fi

    # extract the source
    tar -xvf $url > /dev/null 2>/dev/null
    if [ $? -ne 0 ]; then
        echo "Extract $package failed"
        exit 1
    fi

    # remove the source archive
    rm -rf $package-$arc > /dev/null 2>/dev/null
}

pickup_git_source(){
    export package=$1
    export url=$2

    # download the source
    git clone https://github.com/$url.git $package
    if [ $? -ne 0 ]; then
        echo "Download $package failed"
        exit 1
    fi

    # extract the source
    cd $package
    git tag --list

    # remove the source archive
    cd ..
}

build_deb(){
	export ARC=$1
    export PKGDIR=$(pwd)
	echo PKGDIR=$PKGDIR
	export PKGINFO=$(echo $PKGDIR | sed 's/.*\///')
	echo PKGINFO=$PKGINFO

	# get package name and version
	export PKG=$(echo $PKGINFO | sed 's/-[0-9].*//')
	echo PKG=$PKG
	export VER=$(echo $PKGINFO | sed "s/$PKG-//")
	echo VER=$VER
	export DEBVER=$VER
	echo DEBVER=$DEBVER

	echo original tarball: 
	ls ../$PKG-$VER.tar.$ARC 
	mv ../$PKG-$VER.tar.$ARC ../${PKG}_$DEBVER.orig.tar.$ARC
	echo debian tarball:
	ls ../${PKG}_${DEBVER}.orig.tar.$ARC

    mkdir -p debian
	rm debian/compat > /dev/null 2>/dev/null

    cat > debian/changelog << EOF
${PKG} ($VER-1) unstable; urgency=low

  * Initial release

 -- Yuki Kurosawa Hotkey <yuki@ksyuki.com>  Sat, 01 Jan 2023 00:00:00 +0800

EOF
    cat > debian/control << EOF
Source: ${PKG}
Section: utils
Priority: required
Maintainer: Yuki Kurosawa Hotkey <yuki@ksyuki.com>
Build-Depends: debhelper-compat (= 13), make
Standards-Version: 4.6.1
Homepage: https://github.com/Yuki-Kurosawa/LinuxPE.git
Rules-Requires-Root: binary-targets
Vcs-Git: https://github.com/Yuki-Kurosawa/LinuxPE.git

Package: ${PKG}
Architecture: amd64
Description: ${PKG_DESC}
 
EOF

    cat > debian/rules << EOF
#!/usr/bin/make -f
export DEB_CFLAGS_MAINT_APPEND = ${CFLAGS}

%:
	dh \$@ --without autoreconf

override_dh_auto_configure:
	CFLAGS=${CFLAGS} ./configure ${CONF_FLAGS}

override_dh_auto_clean:
	@true

override_dh_auto_test:
	@true

EOF

	chmod a+x debian/rules

	mkdir -p debian/source

	echo "3.0 (quilt)" > debian/source/format

	#cat debian/control debian/changelog
	
	
    dpkg-buildpackage -sa
    cp ../*.deb $SRCROOT/debs/pool
}

build_deb_ld(){
	export ARC=$1
    export PKGDIR=$(pwd)
	echo PKGDIR=$PKGDIR
	export PKGINFO=$(echo $PKGDIR | sed 's/.*\///')
	echo PKGINFO=$PKGINFO

	# get package name and version
	export PKG=$(echo $PKGINFO | sed 's/-[0-9].*//')
	echo PKG=$PKG
	export VER=$(echo $PKGINFO | sed "s/$PKG-//")
	echo VER=$VER
	export DEBVER=$VER
	echo DEBVER=$DEBVER

	echo original tarball: 
	ls ../$PKG-$VER.tar.$ARC 
	mv ../$PKG-$VER.tar.$ARC ../${PKG}_$DEBVER.orig.tar.$ARC
	echo debian tarball:
	ls ../${PKG}_${DEBVER}.orig.tar.$ARC

    mkdir -p debian
	rm debian/compat > /dev/null 2>/dev/null

    cat > debian/changelog << EOF
${PKG} ($VER-1) unstable; urgency=low

  * Initial release

 -- Yuki Kurosawa Hotkey <yuki@ksyuki.com>  Sat, 01 Jan 2023 00:00:00 +0800

EOF
    cat > debian/control << EOF
Source: ${PKG}
Section: utils
Priority: required
Maintainer: Yuki Kurosawa Hotkey <yuki@ksyuki.com>
Build-Depends: debhelper-compat (= 13), make
Standards-Version: 4.6.1
Homepage: https://github.com/Yuki-Kurosawa/LinuxPE.git
Rules-Requires-Root: binary-targets
Vcs-Git: https://github.com/Yuki-Kurosawa/LinuxPE.git

Package: ${PKG}
Architecture: amd64
Description: ${PKG_DESC}
 
EOF

    cat > debian/rules << EOF
#!/usr/bin/make -f
export DEB_CFLAGS_MAINT_APPEND = ${CFLAGS}

%:
	dh \$@

override_dh_auto_configure:
	CFLAGS=${CFLAGS} LDFLAGS=${LDFLAGS} ./configure ${CONF_FLAGS}

override_dh_auto_clean:
	@true

override_dh_auto_test:
	@true

EOF

	chmod a+x debian/rules

	mkdir -p debian/source

	echo "3.0 (quilt)" > debian/source/format

	#cat debian/control debian/changelog
	
	bash
    dpkg-buildpackage -sa
    cp ../*.deb $SRCROOT/debs/pool
}


build_deb_util_linux(){
	export ARC=$1
    export PKGDIR=$(pwd)
	echo PKGDIR=$PKGDIR
	export PKGINFO=$(echo $PKGDIR | sed 's/.*\///')
	echo PKGINFO=$PKGINFO

	# get package name and version
	export PKG=$(echo $PKGINFO | sed 's/-[0-9].*//')
	echo PKG=$PKG
	export VER=$(echo $PKGINFO | sed "s/$PKG-//")
	echo VER=$VER
	export DEBVER=$VER
	echo DEBVER=$DEBVER

	echo original tarball: 
	ls ../$PKG-$VER.tar.$ARC 
	mv ../$PKG-$VER.tar.$ARC ../${PKG}_$DEBVER.orig.tar.$ARC
	echo debian tarball:
	ls ../${PKG}_${DEBVER}.orig.tar.$ARC

    mkdir -p debian
	rm debian/compat > /dev/null 2>/dev/null

	
	cat > debian/postinst << EOF
#!/bin/bash
rm /bin/mount
mv /bin/mount.static /bin/mount
rm /bin/umount
mv /bin/umount.static /bin/umount
mv /bin/losetup.static /sbin/losetup
rm /sbin/blkid
mv /sbin/blkid.static /sbin/blkid
rm /sbin/fdisk
mv /sbin/fdisk.static /sbin/fdisk
rm /sbin/sfdisk
mv /sbin/sfdisk.static /sbin/sfdisk
rm /sbin/cfdisk # cfdisk is not static,remove it
rm /usr/bin/nsenter
mv /usr/bin/nsenter.static /usr/bin/nsenter
rm /bin/unshare
mv /bin/unshare.static /bin/unshare
EOF

	chmod a+x debian/postinst

    cat > debian/changelog << EOF
${PKG} ($VER-1) unstable; urgency=low

  * Initial release

 -- Yuki Kurosawa Hotkey <yuki@ksyuki.com>  Sat, 01 Jan 2023 00:00:00 +0800

EOF
    cat > debian/control << EOF
Source: ${PKG}
Section: utils
Priority: required
Maintainer: Yuki Kurosawa Hotkey <yuki@ksyuki.com>
Build-Depends: debhelper-compat (= 13), make
Standards-Version: 4.6.1
Homepage: https://github.com/Yuki-Kurosawa/LinuxPE.git
Rules-Requires-Root: binary-targets
Vcs-Git: https://github.com/Yuki-Kurosawa/LinuxPE.git

Package: ${PKG}
Architecture: amd64
Description: ${PKG_DESC}
 
EOF

    cat > debian/rules << EOF
#!/usr/bin/make -f
export DEB_CFLAGS_MAINT_APPEND = ${CFLAGS}

%:
	dh \$@ --without autoreconf

override_dh_auto_configure:
	CFLAGS=${CFLAGS} ./configure ${CONF_FLAGS}

override_dh_auto_clean:
	@true

override_dh_auto_test:
	@true

EOF

	chmod a+x debian/rules

	mkdir -p debian/source

	echo "3.0 (quilt)" > debian/source/format

	#cat debian/control debian/changelog
	
	
    dpkg-buildpackage -sa
    cp ../*.deb $SRCROOT/debs/pool
}

build_deb_busybox(){
	export ARC=$1
    export PKGDIR=$(pwd)
	echo PKGDIR=$PKGDIR
	export PKGINFO=$(echo $PKGDIR | sed 's/.*\///')
	echo PKGINFO=$PKGINFO

	# get package name and version
	export PKG=$(echo $PKGINFO | sed 's/-[0-9].*//')
	echo PKG=$PKG
	export VER=$(echo $PKGINFO | sed "s/$PKG-//")
	echo VER=$VER
	export DEBVER=$VER
	echo DEBVER=$DEBVER

	echo original tarball: 
	ls ../$PKG-$VER.tar.$ARC 
	mv ../$PKG-$VER.tar.$ARC ../${PKG}_$DEBVER.orig.tar.$ARC
	echo debian tarball:
	ls ../${PKG}_${DEBVER}.orig.tar.$ARC

    mkdir -p debian
	rm debian/compat > /dev/null 2>/dev/null

    cat > debian/changelog << EOF
${PKG} ($VER-1) unstable; urgency=low

  * Initial release

 -- Yuki Kurosawa Hotkey <yuki@ksyuki.com>  Sat, 01 Jan 2023 00:00:00 +0800

EOF
    cat > debian/control << EOF
Source: ${PKG}
Section: utils
Priority: required
Maintainer: Yuki Kurosawa Hotkey <yuki@ksyuki.com>
Build-Depends: debhelper-compat (= 13), make
Standards-Version: 4.6.1
Homepage: https://github.com/Yuki-Kurosawa/LinuxPE.git
Rules-Requires-Root: binary-targets
Vcs-Git: https://github.com/Yuki-Kurosawa/LinuxPE.git

Package: ${PKG}
Architecture: amd64
Description: ${PKG_DESC}
 
EOF

    cat > debian/rules << EOF
#!/usr/bin/make -f
export DEB_CFLAGS_MAINT_APPEND = ${CFLAGS}

%:
	dh \$@ --without autoreconf

override_dh_auto_configure:
	@true

override_dh_auto_build:
	\$(MAKE)

override_dh_auto_install:
	\$(MAKE) install CONFIG_PREFIX=\$(CURDIR)/debian/busybox/

override_dh_auto_clean:
	@true

override_dh_auto_test:
	@true

EOF

	chmod a+x debian/rules

	mkdir -p debian/source

	echo "3.0 (quilt)" > debian/source/format

	#cat debian/control debian/
	
	dpkg-source --commit . build_config_changed
	
    dpkg-buildpackage -sa
    cp ../*.deb $SRCROOT/debs/pool
}

build_deb_neofetch(){
	export ARC=$1
    export PKGDIR=$(pwd)
	echo PKGDIR=$PKGDIR
	export PKGINFO=$(echo $PKGDIR | sed 's/.*\///')
	echo PKGINFO=$PKGINFO

	# get package name and version
	export PKG=$(echo $PKGINFO | sed 's/-[0-9].*//')
	echo PKG=$PKG
	export VER=$(echo $PKGINFO | sed "s/$PKG-//")
	echo VER=$VER
	export DEBVER=$VER
	echo DEBVER=$DEBVER

	echo original tarball: 
	ls ../$PKG-$VER.tar.$ARC 
	mv ../$PKG-$VER.tar.$ARC ../${PKG}_$DEBVER.orig.tar.$ARC
	echo debian tarball:
	ls ../${PKG}_${DEBVER}.orig.tar.$ARC

    mkdir -p debian
	rm debian/compat > /dev/null 2>/dev/null

    cat > debian/changelog << EOF
${PKG} ($VER-1) unstable; urgency=low

  * Initial release

 -- Yuki Kurosawa Hotkey <yuki@ksyuki.com>  Sat, 01 Jan 2023 00:00:00 +0800

EOF
    cat > debian/control << EOF
Source: ${PKG}
Section: utils
Priority: required
Maintainer: Yuki Kurosawa Hotkey <yuki@ksyuki.com>
Build-Depends: debhelper-compat (= 13), make
Standards-Version: 4.6.1
Homepage: https://github.com/Yuki-Kurosawa/LinuxPE.git
Rules-Requires-Root: binary-targets
Vcs-Git: https://github.com/Yuki-Kurosawa/LinuxPE.git

Package: ${PKG}
Architecture: amd64
Description: ${PKG_DESC}
 
EOF

	echo "neofetch /bin" > debian/install

    cat > debian/rules << EOF
#!/usr/bin/make -f
export DEB_CFLAGS_MAINT_APPEND = ${CFLAGS}

%:
	dh \$@ --without autoreconf

EOF

	chmod a+x debian/rules

	mkdir -p debian/source

	echo "3.0 (quilt)" > debian/source/format

	#cat debian/control debian/
		
	#bash
    dpkg-buildpackage -sa
    cp ../*.deb $SRCROOT/debs/pool
}


build_deb_ldconfig(){
	export ARC=$1
    export PKGDIR=$(pwd)
	echo PKGDIR=$PKGDIR
	export PKGINFO=$(echo $PKGDIR | sed 's/.*\///')
	echo PKGINFO=$PKGINFO

	# get package name and version
	export PKG=$(echo $PKGINFO | sed 's/-[0-9].*//')
	echo PKG=$PKG
	export VER=$(echo $PKGINFO | sed "s/$PKG-//")
	echo VER=$VER
	export DEBVER=$VER
	echo DEBVER=$DEBVER

	echo original tarball: 
	ls ../$PKG-$VER.tar.$ARC 
	mv ../$PKG-$VER.tar.$ARC ../${PKG}_$DEBVER.orig.tar.$ARC
	echo debian tarball:
	ls ../${PKG}_${DEBVER}.orig.tar.$ARC

    mkdir -p debian
	rm debian/compat > /dev/null 2>/dev/null

    cat > debian/changelog << EOF
${PKG} ($VER-1) unstable; urgency=low

  * Initial release

 -- Yuki Kurosawa Hotkey <yuki@ksyuki.com>  Sat, 01 Jan 2023 00:00:00 +0800

EOF
    cat > debian/control << EOF
Source: ${PKG}
Section: utils
Priority: required
Maintainer: Yuki Kurosawa Hotkey <yuki@ksyuki.com>
Build-Depends: debhelper-compat (= 13), make
Standards-Version: 4.6.1
Homepage: https://github.com/Yuki-Kurosawa/LinuxPE.git
Rules-Requires-Root: binary-targets
Vcs-Git: https://github.com/Yuki-Kurosawa/LinuxPE.git

Package: ${PKG}
Architecture: amd64
Description: ${PKG_DESC}
 
EOF

	echo "ldconfig /sbin" > debian/install
	echo "ldconfig.real /sbin" >> debian/install

    cat > debian/rules << EOF
#!/usr/bin/make -f
export DEB_CFLAGS_MAINT_APPEND = ${CFLAGS}

%:
	dh \$@ --without autoreconf

EOF

	chmod a+x debian/rules

	mkdir -p debian/source

	echo "3.0 (quilt)" > debian/source/format

	#cat debian/control debian/
		
	#bash
    dpkg-buildpackage -sa
    cp ../*.deb $SRCROOT/debs/pool
}

# compile and install bash to rootfs
INSTALL_BASH(){
    rm -rf * > /dev/null 2>/dev/null
    pickup_gnu_source bash gz
    download_gnu_source bash $(pickup_gnu_latest bash gz)    
	cd $(pickup_gnu_latest bash gz | sed 's/.tar.gz//')	
    
    CONF_FLAGS='--prefix=/usr --bindir=/bin --sysconfdir=/etc --localstatedir=/var --libexecdir=/usr/lib/bash \
    --enable-static-link --enable-nls --without-bash-malloc --enable-readline --enable-history \
    --enable-job-control --enable-prompt-string-decoding' PKG_DESC='GNU Bourne Again SHell' build_deb gz
    
    cd ..
}

# compile and install coreutils to rootfs
INSTALL_COREUTILS(){
	rm -rf * > /dev/null 2>/dev/null
	pickup_gnu_source coreutils gz
	download_gnu_source coreutils $(pickup_gnu_latest coreutils gz)
	cd $(pickup_gnu_latest coreutils gz | sed 's/.tar.gz//')
	CFLAGS='--static' CONF_FLAGS='--prefix=/usr --bindir=/bin --sysconfdir=/etc --localstatedir=/var --libexecdir=/usr/lib/coreutils \
	--without-selinux --without-libgmp --disable-acl' PKG_DESC='GNU core utilities' build_deb gz
	cd ..
}

# compile and install util-linux to rootfs
INSTALL_UTIL_LINUX(){
	rm -rf * > /dev/null 2>/dev/null
	wget http://archive.ubuntu.com/ubuntu/pool/main/u/util-linux/util-linux_2.40.2.orig.tar.xz
	tar -xvf util-linux_2.40.2.orig.tar.xz
	cd util-linux-2.40.2

	CONF_FLAGS='--prefix=/usr --bindir=/bin --sysconfdir=/etc --localstatedir=/var --libexecdir=/usr/lib/util-linux \
	--disable-all-programs --enable-static-programs=blkid,fdisk,losetup,mount,nsenter,sfdisk,umount,unshare \
	--enable-blkid --enable-mount --enable-nsenter \
	--enable-unshare --enable-fdisks \
	--enable-losetup --disable-shared \
	--enable-libmount --enable-libblkid --enable-libsmartcols \
	--enable-libfdisk --enable-libuuid' PKG_DESC='miscellaneous system utilities' build_deb_util_linux xz

	cd ..
}

# compile and install nano to rootfs
INSTALL_NANO(){
	rm -rf * > /dev/null 2>/dev/null
	wget https://www.nano-editor.org/dist/v8/nano-8.4.tar.xz
	tar xvf nano-8.4.tar.xz
	cd nano-8.4
	CFLAGS='--static' CONF_FLAGS='--prefix=/usr --bindir=/bin --sysconfdir=/etc --localstatedir=/var --libexecdir=/usr/lib/nano \
	--disable-nls --enable-utf8' PKG_DESC='small, friendly text editor inspired by Pico' build_deb xz

	cd ..
}

# compile and install file to rootfs
INSTALL_FILE(){
	rm -rf * > /dev/null 2>/dev/null
	wget https://astron.com/pub/file/file-5.46.tar.gz
	tar xvf file-5.46.tar.gz
	cd file-5.46
	CFLAGS='--static' CONF_FLAGS='--prefix=/usr --bindir=/bin --sysconfdir=/etc --localstatedir=/var --libexecdir=/usr/lib/file \
	--disable-shared --enable-static' PKG_DESC='Recognize the type of data in a file using "magic" numbers' build_deb gz
	
	cd ..
}

# compile and install busybox to rootfs
INSTALL_BUSYBOX(){
	rm -rf * > /dev/null 2>/dev/null
	wget https://busybox.net/downloads/busybox-1.37.0.tar.bz2
	tar xvf busybox-1.37.0.tar.bz2
	cd busybox-1.37.0
	cp $SRCROOT/busybox.config .config
	#make -j$(nproc) && make install CONFIG_PREFIX=$SYSROOT
	PKG_DESC='Tiny utilities for small and embedded systems' build_deb_busybox bz2
	cd ..
}

# compile and install ncurses to rootfs
INSTALL_NCURSES(){
	rm -rf * > /dev/null 2>/dev/null
	pickup_gnu_source ncurses gz
	download_gnu_source ncurses $(pickup_gnu_latest ncurses gz)
	cd $(pickup_gnu_latest ncurses gz | sed 's/.tar.gz//')
	CFLAGS='--static' CONF_FLAGS='--prefix=/usr --bindir=/bin --sysconfdir=/etc --localstatedir=/var --libexecdir=/usr/lib/ncurses \
	--without-cxx-binding --without-cxx --without-cxx-binding --without-tests --without-debug' PKG_DESC='terminal-related programs and man pages' build_deb gz
	
	cd ..
}

# compile and install strace to rootfs
INSTALL_STRACE(){
	rm -rf * > /dev/null 2>/dev/null
	if ! [ -f ../tars/strace-6.14.tar.xz ]; then
		wget https://github.com/strace/strace/releases/download/v6.14/strace-6.14.tar.xz
	else
		cp ../tars/strace-6.14.tar.xz .
	fi
	
	tar xvf strace-6.14.tar.xz
	cd strace-6.14
	sed -i 's@build/@@g' debian/strace.install > strace.install1
	mv strace.install1 debian/strace.install
	sed -i 's@build/@@g' debian/strace.manpages > strace.manpages1
	mv strace.manpages1 debian/strace.manpages
	CFLAGS='--static' CONF_FLAGS='--prefix=/usr --bindir=/bin --sysconfdir=/etc --localstatedir=/var --libexecdir=/usr/lib/strace \
	--enable-mpers=check' PKG_DESC='system call tracer' build_deb xz	
	cd ..
}

# install neofetch to rootfs
INSTALL_NEOFETCH(){
	rm -rf * > /dev/null 2>/dev/null

	export NEOVER=7.98.0

	if ! [ -f ../tars/neofetch ]; then
		wget https://raw.githubusercontent.com/hykilpikonna/hyfetch/refs/heads/master/neofetch
	else
		mkdir neofetch-${NEOVER}
		cp ../tars/neofetch ./neofetch-${NEOVER}/neofetch		
	fi
	
	chmod a+x ./neofetch-${NEOVER}/neofetch
	cd neofetch-${NEOVER}
	tar acvf ../neofetch-${NEOVER}.tar.gz ./
	
	PKG_DESC="Shows Linux System Information with Distribution Logo" build_deb_neofetch gz
}

# compile install base-files manually to rootfs
INSTALL_BASE_FILES(){
	rm -rf * > /dev/null 2>/dev/null
	if ! [ -f ../tars/99kslinux24.04.tar.xz ]; then
		wget https://github.com/Yuki-Kurosawa/KSLinux_base-files/archive/refs/tags/99kslinux24.04.tar.gz
		mv 99kslinux24.04.tar.gz base-files-99kslinux24.04.tar.gz
	else
		cp ../tars/99kslinux24.04 base-files-99kslinux24.04.tar.gz
	fi
	
	tar xvf base-files-99kslinux24.04.tar.gz
	mv KSLinux_base-files-99kslinux24.04 base-files-99kslinux24.04
	cd base-files-99kslinux24.04
	
	dpkg-buildpackage -sa
	cp ../*.deb $SRCROOT/debs/pool
	cd ..
}

# compile and install ldconfig to rootfs
INSTALL_LDCONFIG(){
	rm -rf * > /dev/null 2>/dev/null

	# create a fake package for ldconfig
	mkdir ldconfig-9.99.0
	cd ldconfig-9.99.0
	echo "#!/bin/bash" > ldconfig
	echo "exit 0" >> ldconfig
	chmod a+x ldconfig
	cp ldconfig ldconfig.real

	tar acvf ../ldconfig-9.99.0.tar.gz ./

	PKG_DESC="Just a ldconfig placeholder due to no dynamic executables" build_deb_ldconfig gz
	cd ..
}

# compile and install dpkg to rootfs
INSTALL_DPKG(){
	rm -rf * > /dev/null 2>/dev/null
	if ! [ -f ../tars/dpkg-1.22.18.tar.gz ]; then
		wget https://salsa.debian.org/dpkg-team/dpkg/-/archive/1.22.18/dpkg-1.22.18.tar.gz
	else
		cp ../tars/dpkg-1.22.18.tar.gz .
	fi

	tar xvf dpkg-1.22.18.tar.gz
	cd dpkg-1.22.18
	echo 1.22.18 > .dist-version
	echo 1.22.18 > .dist-vcs-id
	rm -rvf debian
	cd ..
	tar acvf dpkg-1.22.18.tar.gz dpkg-1.22.18
	cd dpkg-1.22.18

	CFLAGS=--static LDFLAGS=-L/opt/ncurses/usr/lib CONF_FLAGS='--prefix=/ --with-libz --with-liblzma --with-libzstd --with-libbz2 --without-libselinux ' \
	PKG_DESC='Debian package management system' build_deb_ld gz

	cd ..
}

FINALIZE_ROOTFS() {
    # unmount rootfs
    file $SYSROOT/bin/*
    du -sh $SYSROOT
    strip $SYSROOT/bin/* $SYSROOT/usr/bin/* $SYSROOT/sbin/* $SYSROOT/usr/sbin/*
    du -sh $SYSROOT

    if [ "x$INITRAMFS" == "x0" ]; then
        arch-chroot $SYSROOT /bin/bash
        umount $SYSROOT
    fi

    #remove temp build directories
    rm -rf $BUILD_TMP
}


BOOTSTRAP_ROOTFS(){
	cd $SRCROOT/debs
	./build.sh
	cd ..
	debootstrap --no-check-gpg noble $SYSROOT file://$SRCROOT/debs
	cd build
}

# INSTALL_BASH
# INSTALL_COREUTILS
# INSTALL_UTIL_LINUX
# INSTALL_NANO
# INSTALL_FILE
# INSTALL_BUSYBOX
# INSTALL_NCURSES
# INSTALL_STRACE
# INSTALL_NEOFETCH
# INSTALL_BASE_FILES
# INSTALL_LDCONFIG
INSTALL_DPKG
BOOTSTRAP_ROOTFS
FINALIZE_ROOTFS