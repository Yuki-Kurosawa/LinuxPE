#! /bin/bash

clear

# define config variables
export FS_FOLDER=$1
export FS_SIZE=$2
export FS_TYPE=$3
export INITRAMFS=$4
export BUILD_TMP=$(pwd)/build
export FORCE_UNSAFE_CONFIGURE=1

# define default value when args is empty
if [ -z "$FS_FOLDER" ]; then
    FS_FOLDER="rootfs"
fi
if [ -z "$FS_SIZE" ]; then
    FS_SIZE=512
fi
if [ -z "$FS_TYPE" ]; then
    FS_TYPE="ext4"
fi

if [ -z "$INITRAMFS" ]; then
	INITRAMFS=0
fi

export SYSROOT=$(pwd)/${FS_FOLDER}
export SRCROOT=$(pwd)

if [ -d ${FS_FOLDER} ]; then
    rm -rvf ${FS_FOLDER} >/dev/null 2>/dev/null
    rm  ${FS_FOLDER}.img >/dev/null 2>/dev/null
fi

mkdir ${FS_FOLDER}

if [ "x$INITRAMFS" == "x1" ]; then
    cd linux-*
	if [ -f usr/initramfs_data.cpio ]; then
		rm usr/initramfs_data.cpio
	fi
	cd ..
fi

# init rootfs as disk image
dd if=/dev/zero of=${FS_FOLDER}.img bs=1M count=${FS_SIZE} >/dev/null 2>/dev/null
mkfs.${FS_TYPE} ${FS_FOLDER}.img >/dev/null 2>/dev/null
mount ${FS_FOLDER}.img $SYSROOT

# do some links
ln -s usr/bin $SYSROOT/bin
ln -s usr/sbin $SYSROOT/sbin
ln -s usr/lib $SYSROOT/lib
mkdir -p $SYSROOT/usr{/bin,/sbin,/lib}
mkdir -p $SYSROOT{/bin.usr-is-merged,/sbin.usr-is-merged,/lib.usr-is-merged}


# create temp build directories
if [ -d $BUILD_TMP ]; then
    rm -rf $BUILD_TMP >/dev/null 2>/dev/null
fi
mkdir -p $BUILD_TMP
cd $BUILD_TMP

# do builds in build temp directories

# define some help functions for source pickup
pickup_gnu_source(){
    export package=$1
    export ARC=$2
    # download source index files
    curl -s https://ftp.gnu.org/gnu/$package/ > $package.html

    # parse the html to pickup source list
    # pickup $package-\d.*.tar.gz
    grep -oP '(?<=href=")[^"]*' $package.html | grep -E "\.tar\.$ARC$" | grep -P "$package-\d" > $package.list
}

pickup_gnu_latest(){
    export package=$1
    export arc=$2

    # keep only version number from list
    sed -e "s/$package-//" -e "s/.tar.$arc//" $package.list > $package.version

    # sort the version number
    sort -V $package.version > $package.version.sorted

    # pickup the latest version
    export latest=$(tail -n 1 $package.version.sorted)

    rm -rf *.version > /dev/null 2>/dev/null
    rm -rf *.version.sorted > /dev/null 2>/dev/null

    echo $package-$latest.tar.$arc
}

download_gnu_source(){
    export package=$1
    export url=$2

    # download the source
    curl -O https://ftp.gnu.org/gnu/$package/$url
    if [ $? -ne 0 ]; then
        echo "Download $package failed"
        exit 1
    fi

    # extract the source
    tar -xvf $url > /dev/null 2>/dev/null
    if [ $? -ne 0 ]; then
        echo "Extract $package failed"
        exit 1
    fi

    # remove the source archive
    rm -rf $package-$arc > /dev/null 2>/dev/null
}

pickup_git_source(){
    export package=$1
    export url=$2

    # download the source
    git clone https://github.com/$url.git $package
    if [ $? -ne 0 ]; then
        echo "Download $package failed"
        exit 1
    fi

    # extract the source
    cd $package
    git tag --list

    # remove the source archive
    cd ..
}

build_deb(){
	export ARC=$1
    export PKGDIR=$(pwd)
	echo PKGDIR=$PKGDIR
	export PKGINFO=$(echo $PKGDIR | sed 's/.*\///')
	echo PKGINFO=$PKGINFO

	# get package name and version
	export PKG=$(echo $PKGINFO | sed 's/-[0-9].*//')
	echo PKG=$PKG
	export VER=$(echo $PKGINFO | sed "s/$PKG-//")
	echo VER=$VER
	export DEBVER=$(echo $VER | sed 's/-.*//g')
	echo DEBVER=$DEBVER

	echo original tarball: 
	ls ../$PKG-$VER.tar.$ARC 
	mv ../$PKG-$VER.tar.$ARC ../${PKG}_$DEBVER.orig.tar.$ARC
	echo debian tarball:
	ls ../${PKG}_${DEBVER}.orig.tar.$ARC

    mkdir -p debian
    cat > debian/changelog << EOF
${PKG} ($VER) unstable; urgency=low

  * Initial release

 -- Yuki Kurosawa Hotkey <yuki@ksyuki.com>  Sat, 01 Jan 2023 00:00:00 +0800

EOF
    cat > debian/control << EOF
Source: ${PKG}
Section: utils
Priority: optional
Maintainer: Yuki Kurosawa Hotkey <yuki@ksyuki.com>
Build-Depends: debhelper-compat (= 13), make
Standards-Version: 4.6.1
Homepage: https://github.com/Yuki-Kurosawa/LinuxPE.git
Rules-Requires-Root: binary-targets
Vcs-Git: https://github.com/Yuki-Kurosawa/LinuxPE.git

Package: ${PKG}
Architecture: amd64
Description: ${PKG_DESC}
 
EOF

    cat > debian/rules << EOF
#!/usr/bin/make -f
export DEB_CFLAGS_MAINT_APPEND = ${CFLAGS}

%:
	dh \$@ --without autoreconf

override_dh_auto_configure:
	CFLAGS=${CFLAGS} ./configure ${CONF_FLAGS}

EOF

	chmod a+x debian/rules

	mkdir -p debian/source

	echo "3.0 (quilt)" > debian/source/format

	#cat debian/control debian/changelog
	
    dpkg-buildpackage -sa
    cp ../*.deb $SRCROOT/debs
}

# compile and install bash to rootfs
INSTALL_BASH(){
    rm -rf * > /dev/null 2>/dev/null
    pickup_gnu_source bash gz
    download_gnu_source bash $(pickup_gnu_latest bash gz)    
	cd $(pickup_gnu_latest bash gz | sed 's/.tar.gz//')	
    
    CONF_FLAGS='--prefix=/usr --bindir=/bin --sysconfdir=/etc --localstatedir=/var --libexecdir=/usr/lib/bash \
    --enable-static-link --enable-nls --without-bash-malloc --enable-readline --enable-history \
    --enable-job-control --enable-prompt-string-decoding' PKG_DESC='GNU Bourne Again SHell' build_deb gz
    
    cd ..
}

# compile and install coreutils to rootfs
INSTALL_COREUTILS(){
	rm -rf * > /dev/null 2>/dev/null
	pickup_gnu_source coreutils gz
	download_gnu_source coreutils $(pickup_gnu_latest coreutils gz)
	cd $(pickup_gnu_latest coreutils gz | sed 's/.tar.gz//')
	CFLAGS='--static' CONF_FLAGS='--prefix=/usr --bindir=/bin --sysconfdir=/etc --localstatedir=/var --libexecdir=/usr/lib/coreutils \
	--without-selinux --without-libgmp --disable-acl' PKG_DESC='GNU core utilities' build_deb gz
	cd ..
}

# compile and install util-linux to rootfs
INSTALL_UTIL_LINUX(){
rm -rf * > /dev/null 2>/dev/null
wget http://archive.ubuntu.com/ubuntu/pool/main/u/util-linux/util-linux_2.40.2.orig.tar.xz
tar -xvf util-linux_2.40.2.orig.tar.xz
cd util-linux-2.40.2
CONF_FLAGS='--prefix=/usr --bindir=/bin --sysconfdir=/etc --localstatedir=/var --libexecdir=/usr/lib/util-linux \
--disable-all-programs --enable-static-programs=blkid,fdisk,losetup,mount,nsenter,sfdisk,umount,unshare \
--enable-blkid --enable-mount --enable-nsenter \
--enable-unshare --enable-fdisks \
--enable-losetup \
--enable-libmount --enable-libblkid --enable-libsmartcols \
--enable-libfdisk --enable-libuuid' PKG_DESC='miscellaneous system utilities' build_deb xz

cd ..
}

# compile and install nano to rootfs
INSTALL_NANO(){
rm -rf * > /dev/null 2>/dev/null
wget https://www.nano-editor.org/dist/v8/nano-8.4.tar.xz
tar xvf nano-8.4.tar.xz
cd nano-8.4
CFLAGS='--static' CONF_FLAGS='--prefix=/usr --bindir=/bin --sysconfdir=/etc --localstatedir=/var --libexecdir=/usr/lib/nano \
--disable-nls --enable-utf8' PKG_DESC='small, friendly text editor inspired by Pico' build_deb xz

cd ..
}

# compile and install file to rootfs
INSTALL_FILE(){
	rm -rf * > /dev/null 2>/dev/null
	wget https://astron.com/pub/file/file-5.46.tar.gz
	tar xvf file-5.46.tar.gz
	cd file-5.46
	CFLAGS='--static' CONF_FLAGS='--prefix=/usr --bindir=/bin --sysconfdir=/etc --localstatedir=/var --libexecdir=/usr/lib/file \
	--disable-shared --enable-static' PKG_DESC='Recognize the type of data in a file using "magic" numbers' build_deb gz
	
	cd ..
}

# compile and install busybox to rootfs
rm -rf * > /dev/null 2>/dev/null
INSTALL_BUSYBOX(){
	wget https://busybox.net/downloads/busybox-1.37.0.tar.bz2
	tar xvf busybox-1.37.0.tar.bz2
	cd busybox-1.37.0
	cp $SRCROOT/busybox.config .config
	make -j$(nproc) && make install CONFIG_PREFIX=$SYSROOT
	cd ..
}

# compile and install ncurses to rootfs
INSTALL_NCURSES(){
	rm -rf * > /dev/null 2>/dev/null
	pickup_gnu_source ncurses gz
	download_gnu_source ncurses $(pickup_gnu_latest ncurses gz)
	cd $(pickup_gnu_latest ncurses gz | sed 's/.tar.gz//')
	CFLAGS='--static' CONF_FLAGS='--prefix=/usr --bindir=/bin --sysconfdir=/etc --localstatedir=/var --libexecdir=/usr/lib/ncurses \
	--without-cxx-binding --without-cxx --without-cxx-binding --without-tests --without-debug' PKG_DESC='terminal-related programs and man pages' build_deb gz
	
	cd ..
}

# compile and install strace to rootfs
INSTALL_STRACE(){
	rm -rf * > /dev/null 2>/dev/null
	wget https://github.com/strace/strace/releases/download/v6.14/strace-6.14.tar.xz
	tar xvf strace-6.14.tar.xz
	cd strace-6.14
	CFLAGS='--static' CONF_FLAGS='--prefix=/usr --bindir=/bin --sysconfdir=/etc --localstatedir=/var --libexecdir=/usr/lib/strace \
	--enable-mpers=check' PKG_DESC='system call tracer' build_deb xz	
	cd ..
}

# install neofetch to rootfs
INSTALL_NEOFETCH(){
	rm -rf * > /dev/null 2>/dev/null
	wget https://raw.githubusercontent.com/hykilpikonna/hyfetch/refs/heads/master/neofetch
	chmod a+x neofetch
	cp neofetch $SYSROOT/usr/bin/neofetch
}


# Install base-files manually to rootfs
INSTALL_BASE_FILES() {
    cp ../init_tiny $SYSROOT/init
    chmod a+x $SYSROOT/init

    # create some necessary things
    mkdir -p $SYSROOT/{dev,proc,sys,run,etc,tmp,mnt}

    rm $SYSROOT/bin/mount
    mv $SYSROOT/bin/mount.static $SYSROOT/bin/mount
    rm $SYSROOT/bin/umount
    mv $SYSROOT/bin/umount.static $SYSROOT/bin/umount
    mv $SYSROOT/bin/losetup.static $SYSROOT/sbin/losetup
    rm $SYSROOT/sbin/blkid
    mv $SYSROOT/sbin/blkid.static $SYSROOT/sbin/blkid
    rm $SYSROOT/sbin/fdisk
    mv $SYSROOT/sbin/fdisk.static $SYSROOT/sbin/fdisk
    rm $SYSROOT/sbin/sfdisk
    mv $SYSROOT/sbin/sfdisk.static $SYSROOT/sbin/sfdisk
    rm $SYSROOT/sbin/cfdisk # cfdisk is not static,remove it
    rm $SYSROOT/usr/bin/nsenter
    mv $SYSROOT/usr/bin/nsenter.static $SYSROOT/usr/bin/nsenter
    rm $SYSROOT/bin/unshare
    mv $SYSROOT/bin/unshare.static $SYSROOT/bin/unshare


    cat > $SYSROOT/etc/profile << EOF
    export PS1=$'\\u@\\h: \\w\\$ '
EOF

    chmod a+x $SYSROOT/etc/profile

    cat > $SYSROOT/etc/hosts << EOF
    127.0.0.1  localhost $(hostname)
    ::1        localhost
EOF

    cat > $SYSROOT/etc/passwd << "EOF"
    root:x:0:0:root:/root:/bin/bash
    bin:x:1:1:bin:/dev/null:/usr/bin/false
    daemon:x:6:6:Daemon User:/dev/null:/usr/bin/false
    messagebus:x:18:18:D-Bus Message Daemon User:/run/dbus:/usr/bin/false
    uuidd:x:80:80:UUID Generation Daemon User:/dev/null:/usr/bin/false
    nobody:x:65534:65534:Unprivileged User:/dev/null:/usr/bin/false
EOF

    cat > $SYSROOT/etc/group << "EOF"
    root:x:0:
    bin:x:1:daemon
    sys:x:2:
    kmem:x:3:
    tape:x:4:
    tty:x:5:
    daemon:x:6:
    floppy:x:7:
    disk:x:8:
    lp:x:9:
    dialout:x:10:
    audio:x:11:
    video:x:12:
    utmp:x:13:
    cdrom:x:15:
    adm:x:16:
    messagebus:x:18:
    input:x:24:
    mail:x:34:
    kvm:x:61:
    uuidd:x:80:
    wheel:x:97:
    users:x:999:
    nogroup:x:65534:
EOF

    touch $SYSROOT/var/log/{btmp,lastlog,faillog,wtmp}
    chgrp -v utmp $SYSROOT/var/log/lastlog
    chmod -v 664  $SYSROOT/var/log/lastlog
    chmod -v 600  $SYSROOT/var/log/btmp


    # do more fakes for rootfs
    cat > $SYSROOT/etc/issue <<EOF
    Kurosawa Linux 24.04.2 LTS (Kernel Development Branch)\n \l
EOF

    cat > $SYSROOT/etc/os-release <<EOF
    PRETTY_NAME="Kurosawa Linux 24.04.2 LTS"
    NAME="KSLinux"
    VERSION_ID="24.04"
    VERSION="24.04.2 LTS (Noble Numbat)"
    VERSION_CODENAME=noble
    ID=kslinux
    ID_LIKE="debian ubuntu"
    HOME_URL="https://github.com/Yuki-Kurosawa/"
    SUPPORT_URL="https://github.com/Yuki-Kurosawa/"
    BUG_REPORT_URL="https://github.com/Yuki-Kurosawa/"
    PRIVACY_POLICY_URL="https://github.com/Yuki-Kurosawa/"
    UBUNTU_CODENAME=noble
    LOGO=ubuntu-logo
EOF

    cat > $SYSROOT/etc/lsb-release <<EOF
    DISTRIB_ID=KSLinux
    DISTRIB_RELEASE=24.04
    DISTRIB_CODENAME=noble
    DISTRIB_DESCRIPTION="Kurosawa Linux 24.04.2 LTS"
EOF

    cat > $SYSROOT/etc/debian_version <<EOF
    trixie/sid
EOF

    cd $SYSROOT
    mknod -m 600 dev/console c 5 1
    mknod -m 666 dev/null c 1 3
    mknod -m 666 dev/zero c 1 5
    mknod -m 666 dev/tty c 5 0
    mknod -m 666 dev/tty0 c 4 0
    mknod -m 666 dev/tty1 c 4 1
    mknod -m 666 dev/tty2 c 4 2
    mknod -m 666 dev/tty3 c 4 3
    mknod -m 666 dev/tty4 c 4 4

    ln -s /proc/mounts etc/mtab

    cd ..

}

FINALIZE_ROOTFS() {
    # unmount rootfs
    file $SYSROOT/bin/*
    du -sh $SYSROOT
    strip $SYSROOT/bin/* $SYSROOT/usr/bin/* $SYSROOT/sbin/* $SYSROOT/usr/sbin/*
    du -sh $SYSROOT

    if [ "x$INITRAMFS" == "x0" ]; then
        arch-chroot $SYSROOT /bin/bash
        umount $SYSROOT
    fi

    #remove temp build directories
    rm -rf $BUILD_TMP
}

INSTALL_BASH
INSTALL_COREUTILS
INSTALL_UTIL_LINUX
INSTALL_NANO
INSTALL_FILE
INSTALL_BUSYBOX
INSTALL_NCURSES
INSTALL_STRACE
INSTALL_NEOFETCH
INSTALL_BASE_FILES
FINALIZE_ROOTFS